<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hselin]]></title>
  <link href="http://hselin.github.io/atom.xml" rel="self"/>
  <link href="http://hselin.github.io/"/>
  <updated>2016-04-24T18:28:22-07:00</updated>
  <id>http://hselin.github.io/</id>
  <author>
    <name><![CDATA[Albert Chen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OpenIoT Summit 2016]]></title>
    <link href="http://hselin.github.io/blog/2016/04/23/openiot-summit-2016/"/>
    <updated>2016-04-23T19:17:36-07:00</updated>
    <id>http://hselin.github.io/blog/2016/04/23/openiot-summit-2016</id>
    <content type="html"><![CDATA[<div style="overflow:auto">
  <img class="" src="http://hselin.github.io/images/posts/openiot_summit_2016/iot.png" style="width: 75%; height: auto; display: block; margin-left: auto; margin-right: auto">
  <br />
  <br />
  Below are some rough notes and thoughts from Linux Foundation&#8217;s OpenIoT Summit April 4 - 6 in San Diego.
  <br />
  <br />
  <b>Summary</b>
  <br />
  IoT is all about communication (between devices and to the cloud) and its impact on revenue (where value-added services (compute/control) are located).
  Most IoT devices today operate in silos, independent of each other (e.g. Nest, Fitbit). This “island of devices” model can help companies capture brand “loyalty” and potential continuous revenue streams at a cost of bad user experience and freedom (e.g. iOS and Apple app store). In a way, this is similar to how the Internet <a href="http://hselin.com/blog/2015/06/26/the-world-wide-web/">operated</a> before the advent of HTTP and HTML (silos of information separated by incompatible protocols, networks and data formats).
  <br />
  <br />
  Interestingly, the situation above did not result from a lack of available IoT standards (protocols and frameworks).
  In fact, it is the very opposite – there are actually too many IoT standards that claim to be the only open and interoperable solution!
  This results in confusion and wasted efforts in the IoT ecosystem as companies spend more time and resources working on supporting various IoT standards rather than their value differentiator. It does not help the situation when Qualcomm - the founding member of Alljoyn (Allseen alliance) decided to <a href="http://www.forbes.com/sites/aarontilley/2016/02/19/microsoft-qualcomm-and-intel-start-collaborating-on-internet-of-things-standardization/#6061f84c1de0">support</a> the competing framework (IoTivity (OIC/OCF)) as well.  
  <br />
  <br />
  Most of the companies at the conference prefer proximal rather than cloud control of IoT devices under the guise of privacy and security concerns.
  However, this maybe a biased view as none of the companies that presented owns any significant IoT cloud market share (like Google or Fitbit).
  There is a mistrust of IoT cloud companies by device manufactures - as the former could potentially create a walled garden that can exclude vendors and reap most of the revenues from value-added services. 
  <br />
  <br />
  Finally, there was a lot of concern about security. Linus Torvalds and others spoke frequently on the <a href="https://www.schneier.com/essays/archives/2014/01/the_internet_of_thin.html">&#8220;unpatchable”</a> nature of IoT which presents a significant security risk, as IoT devices are &#8220;real physical devices” rather than just software applications.
  <br />
  <br />
  Obligatory <a href="https://www.xkcd.com">xkcd</a>
  <img class="" src="http://hselin.github.io/images/posts/openiot_summit_2016/standards.png" style="width: 45%; height: auto; display: block; margin-left: auto; margin-right: auto">
  <br />
  <br />
  <b>Notes</b>
  <br />
  <u>IOT transports and frameworks</u>  
  <ul style="margin-top: 0px;">
    <li>
      Transports
      <ul style="margin-top: 0px;">
        <li>
          Wifi
          <ul style="margin-top: 0px;">
            <li>
              Ubiquitous
            </li>
            <li>
              Good range & BW
            </li>
            <li>
              High cost and power
            </li>
          </ul>
        </li>
        <li>
          Bluetooth smart (low energy)
          <ul style="margin-top: 0px;">
            <li>
              Standard on most mobile devices
            </li>
            <li>
              Low BW
            </li>
            <li>
              Medium range
            </li>
            <li>
              Low cost and power
            </li>
            <li>
              Mesh network is coming
            </li>
          </ul>
        </li>

        <li>
          Zigbee
          <ul style="margin-top: 0px;">
            <li>
              802.15.4
            </li>
            <li>
              Low range & BW
            </li>
            <li>
              Low power
            </li>
            <li>
              Very low cost
            </li>
            <li>
              Mesh network
            </li>
            <li>
              Known to have interoperability and interference problems
            </li>
          </ul>
        </li>

         <li>
          Zwave
          <ul style="margin-top: 0px;">
            <li>
              Proprietary
            </li>
            <li>
              Low BW
            </li>
            <li>
              Medium range
            </li>
            <li>
              Low power
            </li>
            <li>
              Very low cost
            </li>
            <li>
              Mesh network
            </li>
          </ul>
        </li>


        <li>
          Thread
          <ul style="margin-top: 0px;">
            <li>
              802.15.4 + 6LoWPAN (IP addressable)
            </li>
            <li>
              Low BW
            </li>
            <li>
              Medium range
            </li>
            <li>
              Low power
            </li>
            <li>
              Low cost
            </li>
            <li>
              Mesh network
            </li>
          </ul>
        </li>

        <li>
          EnOcean
          <ul style="margin-top: 0px;">
            <li>
              Ultra low BW
            </li>
            <li>
              Energy harvesting - no power consumption!
            </li>
            <li>
              Medium range
            </li>
            <li>
              Low cost
            </li>
            <li>
              Requires special antenna
            </li>
          </ul>
        </li>         
      </ul>
    </li>
    <li>
      Frameworks
      <ul style="margin-top: 0px;">

        <li>
          IoTivity (OIC/OCF)
          <ul style="margin-top: 0px;">
            <li>
              CoAP (REST model)
            </li>
            <li>
              <img class="" src="http://hselin.github.io/images/posts/openiot_summit_2016/IoTivity_framework.png" style="width: 60%; height: auto; display: block; margin-left: 0; margin-right: auto">
            </li>
            <li>
              <img class="" src="http://hselin.github.io/images/posts/openiot_summit_2016/IoTivity_framework2.png" style="width: 60%; height: auto; display: block; margin-left: 0; margin-right: auto">
            </li>
          </ul>
        </li>

        <li>
          AllJoyn (AllSeen Alliance)
          <ul style="margin-top: 0px;">
            <li>
              Started as Qualcomm project - now a Linux foundation project
            </li>
            <li>
              D-BUS with RPC/RMI model
            </li>
          </ul>
        </li>

        <li>
          HomeKit (Apple)
          <ul style="margin-top: 0px;">
            <li>
              Walled garden - requires MFi chip
            </li>
            <li>
              Not widely adopted
            </li>
            <li>
              No killer app from Apple
            </li>
            <li>
              <img class="" src="http://hselin.github.io/images/posts/openiot_summit_2016/HomeKit_framework.png" style="width: 60%; height: auto; display: block; margin-left: 0; margin-right: auto">
            </li>
          </ul>
        </li>


       <li>
          Google Weave
          <ul style="margin-top: 0px;">
            <li>
              Heavy coupled with Google cloud
            </li>
            <li>
              REST model
            </li>
            <li>
              WiFi and BLE
            </li>
            <li>
              Different from Nest Weave&#8230; aren&#8217;t they the same company?
            </li>
          </ul>
        </li>


      </ul>
    </li>
  </ul>
  <u>MQTT</u>
  <ul style="margin-top: 0px;">
    <li>
      Lightweight pub/sub protocol (store and forward) with reliable bidirectional message delivery
    </li>
    <li>
      Runs on top of TCP/IP (some variant can run on non-TCP/IP network)
    </li>
    <li>
      QoS includes:
      <ul style="margin-bottom: 0px;">
        <li>
          0 - at most once
        </li>
        <li>
          1 - at least once
        </li>
        <li>
          2 - exactly once
        </li>
      </ul>
    </li>
    <li>
      Used by FB Messenger
    </li>
  </ul>

  <u>IoT programming model</u>
  <ul style="margin-top: 0px;">
    <li>
      Local/proximal control/orchestration
      <ul style="margin-bottom: 0px;">
        <li>
          Lower latency
        </li>
        <li>
          Data stays local (privacy + security)
        </li>
        <li>
          Fog model (where data collection and preprocessing is done by border gateway devices)
        </li>
      </ul>
    </li>
    <li>
      IoT frameworks (from lower level to higher)
      <ul style="margin-bottom: 0px;">
        <li>
          Zephyr (RTOS for IoT) - for devices too small to run Linux (e.g. no MMU)<br/>
          Ostro - IoT Linux (built using Yocto)
        </li>
        <li>
          Soletta - yet another IoT API framework
        </li>
        <li>
          MRAA library
        </li>
        <li>
          Intel IoT services orchestration layer
        </li>
      </ul>
    </li>
  </ul>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keep Calm and Break Rules]]></title>
    <link href="http://hselin.github.io/blog/2015/10/06/keep-calm-and-break-rules/"/>
    <updated>2015-10-06T23:24:12-07:00</updated>
    <id>http://hselin.github.io/blog/2015/10/06/keep-calm-and-break-rules</id>
    <content type="html"><![CDATA[<div style="overflow:auto">
  <b>Inefficient and incompatible rules</b>
  <br />
  <del>It is a truth universally acknowledged that</del> Some of the Host Managed SMR <a href="http://hselin.github.io/blog/2015/09/29/keep-calm-and-follow-the-rules/">rules</a> are not exactly conducive to efficient I/O. Even worse, they are incompatible with current host side implementations. For example, a fresh drive with no written data will FAIL ALL read commands sent by the host as ZAC/ZBC does not allow host to read unwritten LBAs. However, this behavior impedes BIOS/OS&#8217; attempt to read partition table/disk signature during system initialization - resulting in either boot failure or long boot time (waiting for retries and timeouts).
  <br />
  <br />
  <b>Feedback and assumptions</b>
  <br />
  These situations occur when <del>storage vendors</del> we attempt to define protocols and heuristics without adequate and timely host side validation. By the time host side feedbacks are considered - firmware and hardware implementations have already ossified. Furthermore, sometimes storage standard authors <del>arrogantly</del> incorrectly assume that as long as a functionality is defined (in a standard), then operating systems should have already implemented support for it (e.g. ATA sense data reporting, SCT WRITE SAME). When reality hits assumption - we are left with inefficient and incompatible implementations.  
  <br />
  <br />
  <img class="" src="http://hselin.github.io/images/posts/keep_calm_and_break_rules/keep_calm_and_break_rules.png" style="width: 30%; height: auto; display: block; margin-left: auto; margin-right: auto">
  <br />
  <b>Rules are meant to be broken</b>
  <br />
  Based on observations working with Host Managed SMR devices and conversations with fellow developers, here are some rules that we should consider breaking.
  <br />
  <br />
  <b>1. Allow read beyond zone Write Pointer, returning zeros or host specified data pattern for unwritten LBAs (similar to reading unmapped/trimmed sectors).</b>
  <br />
  <br />
  <img class="" src="http://hselin.github.io/images/posts/keep_calm_and_break_rules/read_beyond_write_pointer.png" style="width: 45%; height: auto; display: block; margin-left: auto; margin-right: auto">
  <br />
  <br />
  This will allow current system initialization procedures to function without error and simplify host side implementation.
  <br />
  <br />
  <hr />
  <br />
  <b>2. Allow read/write operations to span zones.</b>
  <br />
  <br />
  <img class="" src="http://hselin.github.io/images/posts/keep_calm_and_break_rules/read_and_write_spanning_zones.png" style="width: 80%; height: auto; display: block; margin-left: auto; margin-right: auto">
  <br />
  <br />
  This will eliminate the need to split I/Os along zone boundaries, thus increasing I/O efficiency and simplifying host side implementation (especially when there are <a href="https://lwn.net/Articles/637035/">multiple</a> zone sizes).
  <br />
  <br />
  <hr />
  <br />
  <b>3. Allow write commands addressed to zone starting LBA to implicitly reset zone Write Pointer.</b>
  <br />
  <br />
  <div style="text-align:center;">State of zone as write command is issued</div>
  <img class="" src="http://hselin.github.io/images/posts/keep_calm_and_break_rules/implicit_zone_reset.png" style="width: 45%; height: auto; display: block; margin-left: auto; margin-right: auto">
  <br />
  <br />
  <div style="text-align:center;">State of zone after write command is processed</div>
  <img class="" src="http://hselin.github.io/images/posts/keep_calm_and_break_rules/implicit_zone_reset_result.png" style="width: 45%; height: auto; display: block; margin-left: auto; margin-right: auto">
  <br />
  <br />
  This is a potentially dangerous proposition - as a stray write could accidentally reset a zone and delete all its contents. However, this proposal will eliminate the need to send and wait for the completion of an extra reset Write Pointer command in the I/O path. Moreover, RESET WRITE POINTER EXT as defined currently in ZAC is a non-queued command, which cannot be mixed with NCQ commands (e.g. common read/write commands) without performance penalties.
  <br />
  <br />
  <hr />
  <br />
  <b>4. Allow write commands to start beyond zone Write Pointer, filling gap (unwritten LBAs) with zeros or host defined data pattern.</b>
  <br />
  <br />
  <div style="text-align:center;">State of zone as write command is issued</div>
  <img class="" src="http://hselin.github.io/images/posts/keep_calm_and_break_rules/implicit_write_same.png" style="width: 45%; height: auto; display: block; margin-left: auto; margin-right: auto">
  <br />
  <br />
  <div style="text-align:center;">State of zone after write command is processed</div>
  <img class="" src="http://hselin.github.io/images/posts/keep_calm_and_break_rules/implicit_write_same_result.png" style="width: 45%; height: auto; display: block; margin-left: auto; margin-right: auto">
  <br />
  <br />
  This will eliminate the need for host to send unnecessary write commands just to advance the Write Pointer (so it could write to a specific LBA), leading to better performance and simpler implementation.
  <br />
  <br />
  <b>Conclusion</b>
  <br />
  As mentioned <a href="http://hselin.github.io/blog/2015/08/26/another-layer-of-indirection/">previously</a> - the benefits of having SMR must greatly outweigh the cost of its adoption. It is essential that storage vendors provide an easy and efficient transition path to SMR. Sometimes that means breaking some rules along the way.
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keep Calm and Follow The Rules]]></title>
    <link href="http://hselin.github.io/blog/2015/09/29/keep-calm-and-follow-the-rules/"/>
    <updated>2015-09-29T16:29:25-07:00</updated>
    <id>http://hselin.github.io/blog/2015/09/29/keep-calm-and-follow-the-rules</id>
    <content type="html"><![CDATA[<div style="overflow:auto">
  <b>Accessing Host Managed SMR devices</b>
  <br />
  Host Managed SMR devices must be accessed using either Zoned Access (ATA) or Zoned Block (SCSI) command sets, which restrict I/O operations that could be sent from the host. This results in simplified device implementation and behavior - as we shifted the burden of shingled writing to host software. <del>Hopefully</del> It is expected, that the host will have access to more compute resources (e.g. memory) and semantic/system-level information than a low-level storage device.
  <br />
  <br />
  <img class="" src="http://hselin.github.io/images/posts/keep_calm_and_follow_the_rules/keep_calm_and_follow_the_rules.png" style="width: 30%; height: auto; display: block; margin-left: auto; margin-right: auto">
  <br />
  <br />
  <b>Restrictions</b>
  <br />
  Below is a list of major I/O restrictions that ZAC and ZBC enforce on the host.
  <br />
  <span style="background: yellow;">Nonconforming I/O operations will be failed by the device.</span>
  <br />
  <br />
  <li>Sequential write - writes have to start at zone Write Pointer (WP)</li>
  <li>Zone WPs could be reset (to the zone&#8217;s starting LBA) by issuing a RESET WRITE POINTER command</li>
  <li>Writes have to be 4K aligned in SMR zones</li>
  <li>Reads cannot start or extend beyond the zone WP</li>
  <li>Read/Write commands cannot span zones (some exceptions may apply)</li>
  <br />
  Zone WPs are kept and maintained by the device, they are used to keep host write sequential so we don&#8217;t accidentally wipe-out already written data. After each successful write, the associated zone WP is advanced to the next &#8220;unwritten&#8221; location within the zone (i.e. largest LBA written + 1).
  <br /> 
  <br />
  Here are some concrete examples of the above I/O rules.
  <br />
  <br />
  <img class="" src="http://hselin.github.io/images/posts/keep_calm_and_follow_the_rules/smr_rules.png" style="width: 100%; height: auto; display: block; margin-left: auto; margin-right: auto">  
  <br />
  1. <span style="color: red;">Not allowed - write commands cannot start before zone WP.</span>
  <br />
  2. <span style="color: green;">Allowed - write commands must start at zone WP.</span>
  <br />
  3. <span style="color: green;">Allowed - write commands must start and end in the same zone.</span>
  <br />
  4. <span style="color: red;">Not allowed - write commands cannot span multiple zones.</span>
  <br />
  5. <span style="color: red;">Not allowed - write commands cannot start after zone WP.</span>
  <br />
  6. <span style="color: green;">Allowed - read commands must start and end before zone WP.</span>
  <br />
  7. <span style="color: green;">Allowed - read commands can span up to LBA (zone WP - 1).</span>
  <br />
  8. <span style="color: red;">Not allowed - read commands cannot span multiple zones.</span>
  <br />
  9. <span style="color: red;">Not allowed - read commands cannot start on zone WP.</span>
  <br />
  10. <span style="color: red;">Not allowed - read commands cannot start after zone WP.</span>
  <br />
  <br />
  In the next <a href="http://hselin.github.io/blog/2015/10/06/keep-calm-and-break-rules/">post</a> I&#8217;ll talk about why <span style="background: yellow;">we should break some of these rules for efficiency.</span>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Another Layer Of Indirection]]></title>
    <link href="http://hselin.github.io/blog/2015/08/26/another-layer-of-indirection/"/>
    <updated>2015-08-26T23:58:11-07:00</updated>
    <id>http://hselin.github.io/blog/2015/08/26/another-layer-of-indirection</id>
    <content type="html"><![CDATA[<div style="overflow:auto">
  <b>Introduction</b>
  <br />
  &#8220;Any problem in computer science can be solved by another layer of <a href="https://en.wikipedia.org/wiki/Indirection">indirection</a>&#8221;. Shingle Magnetic Recording (SMR) is no different - the only “difficulty” is in determining where to add the layer of indirection to enable maximum flexibility and efficiency. Basically, we want to insert a “SMR translation layer&#8221; that takes in random I/Os and outputs a sequential I/O stream. This layer could be implemented as a library, file system routine, driver, application or firmware - each with their own set of trade-offs. In general, higher indirection/abstraction layers will have access to more semantic and system level information. This could lead to better performance and more room for innovation. For example, the initiator application will have more knowledge about the importance and intent of an I/O than firmware on the target device.
  <br />
  <br />
  <img class="" src="http://hselin.github.io/images/posts/smr_translation_layer.png" style="width: 350px; height: auto; display: block; margin-left: auto; margin-right: auto">
  <br />
  <br />
  <img class="" src="http://hselin.github.io/images/posts/layers_of_information.png" style="width: 500px; height: auto; display: block; margin-left: auto; margin-right: auto">
  <br />
  <br />
  <b>Layers of SMR</b>
  <br />
  With these thoughts in mind, here are some approaches to enabling SMR.
  The orange boxes indicate where the “SMR translation layer&#8221; could be implemented for the various solutions. As one can see from the diagram below, where “SMR translation layer&#8221; could be inserted varies across the spectrum depending on the hardware and software deployed.
  <br />
  <br />
  <img class="" src="http://hselin.github.io/images/posts/smr_stack.png" style="width: 500px; height: auto; display: block; margin-left: auto; margin-right: auto">
  <br />
  <br />
  <ul style="margin-top: 0px;">
    <li>
      <b>Enlightened user application</b>
      <br />
      Companies with system software engineering capabilities could develop or modify their applications to be SMR-aware and reap the benefits of increased capacity immediately without (much) ecosystem support. SMR awareness at this level enables great flexibility and efficiency as the application manages its own data allocation. However, it is not very scalable in terms of extending SMR support across all user applications. It also requires potential cooperation and co-development with SMR device manufacturers (e.g. error code propagation and interpretation).
    </li>
    <br />
    <li>
      <b>SMR software library</b>
      <br />
      Companies with moderate level of software engineering capabilities could develop or modify their applications to utilize libraries (e.g. <a href="https://github.com/hgst/libzbc">libzbc</a>) that provide SMR support. However, this requires modification of all applications that use SMR and ecosystem support (library development). It also introduces the complexity of dealing with library API changes.
    </li>
    <br />
    <li>
      <b>SMR-friendly file system</b>
      <br />
      Building a SMR-friendly file system is an attractive solution as it allows most applications to work with SMR devices without modification. The file system hides the complexity of SMR behind the familiar POSIX/Unix interface of open/close/read/write. At WD, we have <a href="http://hselin.github.io/projects">modified</a> New Implementation of a Log-structured File System (NILFS) and Linear Tape File System (LTFS) to work with single and multi-zoned Host Managed SMR drives. However, file systems are notoriously hard to debug and to become trustworthy. It is also hard to convince people and companies to switch to a new file system just to support SMR devices. The situation may be different if major existing file systems become SMR-aware (e.g. <a href="https://github.com/Seagate/SMR_FS-EXT4">ext4</a>, <a href="https://git.kernel.org/cgit/fs/xfs/xfs-documentation.git/tree/design/xfs-smr-structure.asciidoc">XFS</a>, <a href="https://hackweek.suse.com/projects/282">BTRFS</a>, <a href="http://storageconference.us/2014/Presentations/Novak.pdf">ZFS</a>).
    </li>
    <br />
    <li>
      <b>SMR driver</b>
      <br />
      Further down the stack, we could build a SMR-aware block/filter driver. This allows file systems to work transparently with SMR devices and requires no application change. At WD, we are currently working on a <a href="https://en.wikipedia.org/wiki/Device_mapper">device mapper</a> target to support Host Managed SMR devices (more on this in later posts). However, SMR awareness at this level may not provide as much efficiency and flexibility as compared to some of the previous use models. Additionally, we may be constrained by functionalities and limitations of layers below (e.g. libATA, miniports).
    </li>
    <br />
    <li>
      <b>Device Managed SMR</b>
      <br />
      Finally, we could always punt the work of managing SMR behavior to the device. After all, device manufacturers are the storage experts and they &#8220;created&#8221; this problem in the first place! By implementing SMR handling at the lowest level, file systems and applications will work transparently with SMR devices - from the host perspective, a Device Managed SMR drive works exactly like a conventional <a href="https://en.wikipedia.org/wiki/Perpendicular_recording drive">PMR</a> drive. Have we found a panacea to our SMR problem? Maybe. It depends on our usage model and performance expectations. For example, just how &#8220;transparent&#8221; is this solution? Unlike traditional drives - the performance characteristics of a Device Managed SMR drive may change as we fill it to capacity (at some point read-modify-write will be required to change device contents). Can applications really transparently deal with this behavior? Furthermore, this &#8220;transparency&#8221; comes at a cost - in terms of performance, flexibility and scalability.
      <br />
      <br />
      <ul style="margin-top: 0px;">
        <li>
          Performance - at the device level, only limited amount of semantic information is available from the host. It is up to the device to interpret the meaning and importance of each read and write command. This limits the amount of optimization that could be implemented. For example, the device might kick off a garbage collection process while the host is busy flushing important data to disk; and an application can experience drastically different I/O completion times while executing the same operation.
        </li>
        <br />
        <li>
          Flexibility - since each vendor might implement SMR handling differently, device behavior and performance may differ by product line, manufacturer or even firmware version. For example, an I/O bound application might work as expected with a homogeneous drive population but exhibits unexpected behavior/bottlenecks when drive population is heterogeneous.
        </li>
        <br />
        <li>
          Scalability - the amount of <a href="https://en.wikipedia.org/wiki/Disk_buffer">memory</a> and processing power on each device is fixed at manufacturing time and specified by the storage vendor. This means the amount of resources available for SMR handling cannot be dynamically reallocated and scaled according to host software demand. This is important as storage devices are already (or are becoming increasingly) the bottleneck for many compute operations.
        </li>
      </ul>
    </li>
  </ul>
   Ultimately, there is no free lunch. Someone at some layer needs to pay the price for managing SMR. This can range from enlightened application down to enhanced firmware and through methods such as over-provisioning, usage of host resources, or <a href="https://en.wikipedia.org/wiki/Hybrid_drive">hybrid storage</a>. There is no one solution that fits all use cases - the additional layer of indirection for SMR is application and environment dependent.
  <br />
  <br />
  <b>Conclusion</b>
  <br />
  Fundamentally, SMR is not a &#8220;feature&#8221; for the end-user (unless you really want a <a href="https://en.wikipedia.org/wiki/Write_once_read_many">WORM</a> drive), it is a capacity enabler for device manufacturers. No user is willing to pay extra just to have SMR. The benefits of having SMR must greatly outweigh the cost of its adoption for us to see significant espousal in developing and modifying software and hardware to be SMR-aware/friendly. As we&#8217;ve seen, SMR adoption is a complex problem. It cannot be solved by a single vendor or in a single layer; it requires the whole ecosystem to work together to build a comprehensive solution for all use cases.
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Host Managed SMR Simulator]]></title>
    <link href="http://hselin.github.io/blog/2015/08/23/host-managed-smr-simulator/"/>
    <updated>2015-08-23T11:37:24-07:00</updated>
    <id>http://hselin.github.io/blog/2015/08/23/host-managed-smr-simulator</id>
    <content type="html"><![CDATA[<div style="overflow:auto">
  <b>Introduction</b>
  <br />
  <a href="https://en.wikipedia.org/wiki/Shingled_magnetic_recording">Shingle Magnetic Recording</a> is a disruptive technology that will enable areal density growth for the hard drive industry by partially overlapping tracks. Shingling requires physical writes to be sequential, which opens the question of how to address this behavior at a system level. Two general approaches contemplated are to either handle block management in the device (Device Managed SMR) or in host software (Host Managed SMR) via Zone ATA or Zoned Block command sets (ZAC/ZBC).
  <br />
  <br />
  <b>Trade-offs between Host Managed and Device Managed solutions</b>
  <br />
  There are trade-offs to each approach. For example, Device Managed SMR drives are backwards compatible with existing file systems and BIOS&#8217; but may introduce unpredictable or uncontrollable performance. While Host Managed SMR drives provide and suffer the opposite.
  <br />
  <br />
  <b>Host Managed SMR protocol constraints</b>
  <br />
  ZBC and ZAC protocols restrict what IOs could be sent to the device and this in turn simplifies HW/FW behavior and implementation. Major differences/restrictions include:
  <br/>
  <ul style="margin-top: 0px;">
    <li>New device type (may not work with existing OS/HBA/BIOS)</li>
    <li>Sequential write - writes have to start at zone Write Pointer</li>
    <li>Writes have to be 4k aligned in SMR zones</li>
    <li>Reads cannot start or extend beyond the zone Write Pointer</li>
    <li>Read/Write commands cannot span zones (some exceptions may apply)</li>
  </ul>
  <b>Host Managed SMR device simulator</b>
  <br />
  This week, WD is releasing a SMR simulator to facilitate host-side software/file system development.
  SMR-Simulator is a simple tool that captures host software behavior and determines its “friendliness” to SMR technology. We hope SMR-Simulator will enable open source developers to experiment and become familiar with SMR functionalities and behaviors without the need to access real SMR (ZBC/ZAC) HW.
  <br />
  <br />
  <b>Web site</b>
  <br />
  <a href="https://github.com/westerndigitalcorporation/SMR-Simulator">https://github.com/westerndigitalcorporation/SMR-Simulator</a>
  <br />
  <b>Behavior expectations</b>
  <br />
  <a href="https://github.com/westerndigitalcorporation/SMR-Simulator/wiki/SMR-Simulator-Behavior-Expectations">https://github.com/westerndigitalcorporation/SMR-Simulator/wiki/SMR-Simulator-Behavior-Expectations</a>
  <br />
  <br />
  <img class="float-left" src="http://hselin.github.io/images/posts/magnetic_pole.png" style="width: 300px; height: auto;">
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IoT Security]]></title>
    <link href="http://hselin.github.io/blog/2015/06/27/iot-security/"/>
    <updated>2015-06-27T13:09:00-07:00</updated>
    <id>http://hselin.github.io/blog/2015/06/27/iot-security</id>
    <content type="html"><![CDATA[<div style="overflow:auto">
  Course presentation for <a href="http://cs294s.stanford.edu">CS 294S: Research Project in Software Systems and Security</a>. 
  <br />
  <br />
  <b>Introduction</b>
  <br />
  Growth of IoT is phenomenal. More and more devices are becoming connected. This also means a bigger attack surface and real life-threatening consequences in a security breach. 
  <br />
  <iframe src="https://docs.google.com/presentation/d/1QP_UmcL-H6H5zTwYkXBoWcxrkyLfvdvht2SzhIx3kPA/embed?start=false&loop=false&delayms=0" frameborder="0" width="480" height="299" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>
  <br />
  <b>This is awesome</b>
  <br />
  &#8220;Homomorphic encryption is a form of encryption that allows computations to be carried out on <span style="font-weight: bold; color:red;">ciphertext</span>, thus generating an encrypted result which, when decrypted, matches the result of operations performed on the plaintext.&#8221;
  <a href="https://en.wikipedia.org/wiki/Homomorphic_encryption/">https://en.wikipedia.org/wiki/Homomorphic_encryption</a>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sabrina]]></title>
    <link href="http://hselin.github.io/blog/2015/06/27/sabrina/"/>
    <updated>2015-06-27T02:36:24-07:00</updated>
    <id>http://hselin.github.io/blog/2015/06/27/sabrina</id>
    <content type="html"><![CDATA[<div style="overflow:auto">
  Course project for <a href="http://cs294s.stanford.edu">CS 294S: Research Project in Software Systems and Security</a>. 
  <br />
  <br />
  <b>Introduction</b>
  <br />
  Sabrina is an intelligent personal assistant that can help simplify your life. She can monitor events, perform actions and even control nearby devices on your behalf. Sabrina interacts with you through Omlet chat and gets to know you overtime. By taking care of all the little details, Sabrina enables you to focus on things that matter the most in your life&#8230;
  <br />
  <br />
  <b>Overall framework</b>
  <table style="width:100%; border-style: none; border-spacing: 50px; margin-top: 0px;">
    <tr>
      <td style="margin: 0px;"><img src="http://hselin.github.io/images/posts/Rulepedia.png" style="width: 100%; height: auto;"></td>
      <td><img src="http://hselin.github.io/images/posts/Sabrina.png" style="width: 100%; height: auto;"></td> 
    </tr>
  </table>
  <br />
  <b>Project links</b>
  <br />
  <a href="https://vast-hamlet-6003.herokuapp.com/">Project website</a>
  <br />
  <a href="http://hselin.github.io/resources/Sabrina_Poster.pdf">Poster</a>
  <br />
  <a href="http://hselin.github.io/resources/Sabrina_Final_Report.pdf">Final report</a>
  <br />
  <br />
  <b>TL;DR</b>
  <br />
  <span style="font-weight: bold; color:red;">Sabrina = Siri + XiaoBing + IoT + IFTTT</span>
  <br />
  <br />
  <b>Concept + prototype video</b>
  <br />
  <iframe width="560" height="315" src="https://www.youtube.com/embed/wYV210CyROY" frameborder="0" allowfullscreen style="margin-top: 0px;"></iframe>
  <br />
  <b>Project proposal</b>
  <br />
  <iframe src="https://docs.google.com/presentation/d/1NRr6eUPQ-D86pfjcNA2PfQzZaCHU5QQLo_UV_rmLmvo/embed?start=false&loop=false&delayms=0" frameborder="0" width="480" height="299" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true" style="margin-top: 0px;"></iframe>
  <br />
  <b>Final progress report</b>
  <br />
  <iframe src="https://docs.google.com/presentation/d/1dT6UerwUmcwePs3PhN8jhbsyZhJZV5WmdrzS5LImTgA/embed?start=false&amp;loop=false&amp;delayms=0" frameborder="0" width="480" height="299" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true" style="margin-top: 0px;"></iframe>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The World Wide Web]]></title>
    <link href="http://hselin.github.io/blog/2015/06/26/the-world-wide-web/"/>
    <updated>2015-06-26T02:51:27-07:00</updated>
    <id>http://hselin.github.io/blog/2015/06/26/the-world-wide-web</id>
    <content type="html"><![CDATA[<div style="overflow:auto">
  Write up for <a href="http://cs344g.stanford.edu">CS344G: (Your) Great Ideas for Networked Applications</a> reading on the World Wide Web. 
  <br />
  <br />
  <b>Reading list</b>
  <br />
  <a href="http://web.stanford.edu/class/cs344g/www-1992.pdf">CT. J. Berners-Lee, R. Cailliau, and J.-F. Groff. 1992. The World-Wide Web.</a>
  <br />
  <a href="http://www.w3.org/People/Berners-Lee/1996/ppf.html">Tim Berners-Lee, The World Wide Web: Past, Present and Future</a>
  <br />
  <br />
  <b>Before the web</b>
  <ul style="margin-top: 0px;">
    <li>Silos of information - incompatible protocols, networks and data formats</li>
    <li>At a time when more and more information is being recorded electronically</li>
    <li>As We May Think – Vannevar Bush [1945]</li>
    <ul style="margin-top: 0px;">
      <li>“The summation of human experience is being expanded at a prodigious rate, and the means we use for threading through the consequent maze to the momentarily important item is the same as was used in the days of square-rigged ships.”</li>
      <li>“This is the essential feature of the memex. The process of tying two items together is the important thing.”</li>
    </ul> 
  </ul> 
  
  <b>Goal of the web</b>
  <ul style="margin-top: 0px;">
    <li>Shared information space through which people and <span style="font-weight: bold; color:red;">machines</span> could communicate</li>
    <ul>
      <li>Globally shared information space</li>
      <li>Machine analysis of work patterns, interactions and thoughts</li>
    </ul>
  </ul> 

  <b>Design criteria</b>
  <ul style="margin-top: 0px;">
    <li>Allow random associations between any objects</li>
    <li>Independent systems (scalable)</li>
    <li>No constraints on language/OS/user mental model of data</li>
    <li>Easy to use (browse and add new information)</li>
    <li>Supports all platforms and forward compatible</li>
  </ul> 

  <a href="http://hselin.github.io/resources/The_World_Wide_Web.pdf">Full write-up here</a>

  <br />
  <img class="float-left" src="http://hselin.github.io/images/posts/memex.jpg" style="width: 300px; height: auto;">
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IX++]]></title>
    <link href="http://hselin.github.io/blog/2015/06/25/ix-plus-plus/"/>
    <updated>2015-06-25T16:21:16-07:00</updated>
    <id>http://hselin.github.io/blog/2015/06/25/ix-plus-plus</id>
    <content type="html"><![CDATA[<div style="overflow:auto">
  <a href="http://cs344g.stanford.edu">CS344G: (Your) Great Ideas for Networked Applications</a> class project. 
  <br />
  <br />
  <b>Introduction</b>
  <br />
  IX++ is an extension of the IX Dataplane Operating System that uses PCI Single Root I/O Virtualization (SR-IOV) to run multiple networked applications concurrently with minimal interference. The original IX ran alongside Linux and required a dedicated physical network interface card (NIC) for each multi-threaded IX application, as well as one for Linux. In IX++, each multi-threaded application is instead given its own virtual NIC through SR-IOV, and Linux can run concurrently on the physical NIC. In brief, the original IX required a dedicated NIC for Linux and one NIC per IX application while IX++ uses NIC virtualization to allow Linux and multiple IX applications to multiplex a single physical NIC. In this paper we describe the implementation of IX++ and demonstrate its significant performance advantages over Linux when running concurrent networked applications. We also show that using different Linux Traffic Control Queuing Disciplines can help, but not close, this performance advantage.
  <br />
  <br />
  <a href="http://hselin.github.io/resources/ix++_final_presentation.pdf">Project presentation</a>
  <br />
  <a href="http://hselin.github.io/resources/CS344g_ixplusplus_final paper.pdf">Read project report here</a>
  <br />
  <br />
  <b>Latency vs Throughput</b>
  <img src="http://hselin.github.io/images/posts/ix++_latency_chart.png" style="width: 100%; height: auto;">
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ola Diabetes Care]]></title>
    <link href="http://hselin.github.io/blog/2015/06/25/ola-diabetes-care/"/>
    <updated>2015-06-25T02:31:42-07:00</updated>
    <id>http://hselin.github.io/blog/2015/06/25/ola-diabetes-care</id>
    <content type="html"><![CDATA[<div style="overflow:auto">
  <a href="http://cs147.stanford.edu">CS 147: HCI+D</a> class project. 
  <br />
  <br />
  <b>Introduction</b>
  <br />
  Ola is a system (smartphone application + wearable pod) that provides real-time context-aware care for diabetic patients by using smart wearable devices and advanced data analytics.
  <br />
  <br />
  <a href="http://hci.stanford.edu/courses/cs147/2014/au/projects/information/ola/index.html">Project website</a>
  <br />
  <a href="http://stanford.edu/class/cs194h/projects/ola/finalreport.pdf">Read project report here</a>
  <br />
  <br />
  <b>Concept video</b>
  <br />
  <iframe src="https://player.vimeo.com/video/109275030" width="500" height="281" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen style="margin-top: 0px;"></iframe>
  <br />
  <b>Low-fi Prototyping & Pilot Usability Testing</b>
  <iframe src="https://docs.google.com/presentation/d/1IHg6FU_0lRwFgFxQo3oe5CXJjm7HFTq39mFR5cGb9rU/embed?start=false&loop=false&delayms=0" frameborder="0" width="480" height="299" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true" style="margin-top: 0px;"></iframe>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3rd-party cookies]]></title>
    <link href="http://hselin.github.io/blog/2014/08/26/3rd-party-cookies/"/>
    <updated>2014-08-26T17:30:14-07:00</updated>
    <id>http://hselin.github.io/blog/2014/08/26/3rd-party-cookies</id>
    <content type="html"><![CDATA[<div style="overflow:auto">
  <a href="http://cs142.stanford.edu">CS142: Web Applications</a> writing assignment. 
  <br />
  <br />
  Should browsers <i>disable</i> or <i>enable</i> 3rd-party cookies by default?
  <br />
  <br />
  <b>Introduction</b>
  <br />
  While third-party cookies enable new web functionalities, it can also expose users’ browsing 
  history without users’ awareness. A person’s web history inevitably reveals personal 
  information, which could be maliciously exploited for economical and/or psychological harm.
  Furthermore, users’ obliviousness impedes the use of market force to regulate these third 
  parties. To address this ecosystem deficiency, browsers should disable third-party cookies by 
  default – requiring users to explicitly &#8220;opt-in&#8221;. 
  <br />
  <br />
  <br />
  <img class="float-left" src="http://hselin.github.io/images/posts/cookies.png" style="width: 200px; height: 100px; margin-right: 10px">
  <br />
  <br />
  <a href="http://hselin.github.io/resources/cs142-hselin-htyen-writing.pdf">Full write-up here</a>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I don't know]]></title>
    <link href="http://hselin.github.io/blog/2014/07/30/i-dont-know/"/>
    <updated>2014-07-30T23:24:31-07:00</updated>
    <id>http://hselin.github.io/blog/2014/07/30/i-dont-know</id>
    <content type="html"><![CDATA[<div style="overflow:auto">
  <img class="float-left" src="http://hselin.github.io/images/posts/unknown.jpg" style="width: 130px; height: 200px; margin-right: 10px">
  An interesting thing happened today at work.
  <br />
  <br />
  There was a company wide all-hands meeting this evening, this is where the executives review our past quarter performance and reveal the all important number that everyone is most interested in - the bonus payout percentage. However, it is not the bonus payout percentage that is interesting&#8230; what caught my attention is a quick, short comment made by the CEO which could be paraphrased into: a CEO should not say &#8220;I don&#8217;t know&#8221;.
  <br />
  <br />
  It took me by surprise, as I am trying to learn to say &#8220;I don&#8217;t know&#8221; more often!
  You know what I mean - it is really hard to say/admit &#8220;I don&#8217;t know&#8221; at work as there is almost always a pressure to deliver some kind of an answer or to look good/save face in a meeting. Sometimes it is ignorance and sometimes it is just not enough available information - but I believe saying &#8220;I don&#8217;t know&#8221; is one of the most honest, courageous and confident action one can make. I would rather see a leader readily admits to his/her lack of understanding than for a facade of omniscience.
  <br />
  <br />
  “Stay hungry, stay young, stay foolish, stay curious, and above all, stay humble because just when you think you got all the answers, is the moment when some bitter twist of fate in the universe will remind you that you very much don&#8217;t.” ― Tom Hiddleston 
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS, XMLHttpRequest and Video]]></title>
    <link href="http://hselin.github.io/blog/2014/07/23/ios-xmlhttprequest-and-video/"/>
    <updated>2014-07-23T14:30:33-07:00</updated>
    <id>http://hselin.github.io/blog/2014/07/23/ios-xmlhttprequest-and-video</id>
    <content type="html"><![CDATA[<div style="overflow:auto">
  <img class="float-left" src="http://hselin.github.io/images/posts/apple-logo.png" style="width: 200px; height: 100px; margin-right: 10px">
  So&#8230; Safari on iOS <a href="http://caniuse.com/video ">supports</a> HTML5 video element. That&#8217;s great, good job Apple.
  <br />
  BUT - why can&#8217;t you take the extra step of allowing the video element to work with blob object URL as the source?!

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="kd">var</span> <span class="nx">oReq</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">oReq</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s2">&quot;GET&quot;</span><span class="p">,</span> <span class="nx">URL</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">oReq</span><span class="p">.</span><span class="nx">responseType</span> <span class="o">=</span> <span class="s2">&quot;blob&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">oReq</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">((</span><span class="nx">oReq</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">==</span> <span class="mi">4</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">oReq</span><span class="p">.</span><span class="nx">status</span> <span class="o">==</span> <span class="mi">200</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">blobURL</span> <span class="o">=</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">URL</span> <span class="o">||</span> <span class="nb">window</span><span class="p">.</span><span class="nx">webkitURL</span><span class="p">).</span><span class="nx">createObjectURL</span><span class="p">(</span><span class="nx">oReq</span><span class="p">.</span><span class="nx">response</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#myVideo&quot;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;src&quot;</span><span class="p">,</span> <span class="nx">blobURL</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">oReq</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>
  
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code diversity]]></title>
    <link href="http://hselin.github.io/blog/2014/07/09/code-diversity/"/>
    <updated>2014-07-09T17:16:38-07:00</updated>
    <id>http://hselin.github.io/blog/2014/07/09/code-diversity</id>
    <content type="html"><![CDATA[<div style="overflow:auto">
  <img class="float-left" src="http://hselin.github.io/images/posts/bones.jpg" style="width: 200px; height: 200px; margin-right: 10px">
  It&#8217;s been 3 month since <a href="http://en.wikipedia.org/wiki/Heartbleed">HeartBleed</a> was publicly disclosed.
  According to Wikipedia ~17% of secure web servers were believed to be vulnerable.
  <br />
  <br />
  That makes me wonder - what is the affect of our increasing reliance on a few well known libraries for application functionalities?
  Will this limit the &#8220;genetic diversity&#8221; of our software ecosystem?
  <br />
  <br />
  On one hand, as long as we take good care of our libraries this reduces the amount of development, test, and inter-op costs and also prevents amateur mistakes. It&#8217;s akin to putting our eggs in a few selected baskets and taking good care of them (I stole this phrase from Prof. Cheriton). But what happens when you drop a basket? A major bug in a library could have devastating results for the whole ecosystem as it might be used by a significant number of applications.
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test Title]]></title>
    <link href="http://hselin.github.io/blog/2014/06/24/test-title/"/>
    <updated>2014-06-24T22:55:50-07:00</updated>
    <id>http://hselin.github.io/blog/2014/06/24/test-title</id>
    <content type="html"><![CDATA[<p>Hello World!</p>
]]></content>
  </entry>
  
</feed>
